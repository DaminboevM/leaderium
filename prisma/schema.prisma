generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  fullName         String
  email            String           @unique
  password         String?
  role             Role             @default(USER)
  avatar           String?
  headline         String?
  about            String?
  location         String?
  website          String?
  phone            String?
  createdAt        DateTime         @default(now())
  receivedRequests Connection[]     @relation("ReceivedRequests")
  sentRequests     Connection[]     @relation("SentRequests")
  educations       Education[]
  experiences      Experience[]
  jobs             Job[]
  applications     JobApplication[]
  messagesRecv     Message[]        @relation("MessagesRecv")
  messagesSent     Message[]        @relation("MessagesSent")
  notifications    Notification[]
  OAuthAccount     OAuthAccount[]
  skills           Skill[]
}

model Experience {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?
  user        User      @relation(fields: [userId], references: [id])
}

model Education {
  id          Int       @id @default(autoincrement())
  userId      Int
  school      String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  description String?
  user        User      @relation(fields: [userId], references: [id])
}

model Skill {
  id     Int    @id @default(autoincrement())
  userId Int
  name   String
  user   User   @relation(fields: [userId], references: [id])
}

model Connection {
  id         Int              @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     ConnectionStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  receiver   User             @relation("ReceivedRequests", fields: [receiverId], references: [id])
  sender     User             @relation("SentRequests", fields: [senderId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  receiver   User     @relation("MessagesRecv", fields: [receiverId], references: [id])
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
}

model Job {
  id           Int              @id @default(autoincrement())
  userId       Int
  title        String
  company      String
  location     String
  description  String
  createdAt    DateTime         @default(now())
  user         User             @relation(fields: [userId], references: [id])
  applications JobApplication[]
}

model JobApplication {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  message   String?
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model OAuthAccount {
  id             Int     @id @default(autoincrement())
  userId         Int
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  user           User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerUserId])
  @@index([provider, providerUserId])
}

enum Role {
  USER
  ADMIN
}

enum ConnectionStatus {
  PENDING
  CONNECTED
  REJECTED
}

enum NotificationType {
  LIKE
  COMMENT
  MESSAGE
  CONNECTION_REQUEST
  JOB_APPLICATION
}
